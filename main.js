//Задача 1
//Создаем функию которая принимает в себя массив
function oddOrEven(array) {

    // Создаем перемменую которой присваиваем нуливое значение, к которому мы будем считать целые числа с массива
    // Эта переменная будет использоваться для хранения суммы элементов массива.
    let sumOfElements = 0

    //Используем цикл
    //for-of, который проходит по каждому элементу массива array и добавляет его значение к переменной sumOfElements.
    for (const element of array) {
        sumOfElements += element;
    }

    // Далее выполняем условие
    // Если значение нашей переменной четное тогда выводится  `even`, а иначе `odd`
    if (sumOfElements % 2 === 0) {
        return `even`
    } else {
        return `odd`
    }
}

// console.log(oddOrEven([1, 1, 1]))

//Задача 2
// Создаем функцию, которая принимает в себя массив чисел
function sumTwoSmallestNumbers(numbers) {
    // Используем метод сортировки для нахождения двух наименьших целых чисел
    // Метод sort изменяет исходный массив, сортируя его в порядке, заданном функцией сравнения
    numbers.sort((a, b) => a - b);

    // Возвращаем сумму двух первых (наименьших) элементов массива
    return numbers[0] + numbers[1];
}

// console.log(sumTwoSmallestNumbers([5, 8, 12, 19, 22])); //13

//Задача 3
// Создаем функцию, которая принимает  в параметрах логическое значение
function booleanToString(b) {
    // Возвращаем значение параметра с методом Boolean.prototype.toString()
    // Метод toString() возвращает строковое представление указанного объекта Boolean.

    return b.toString()
}

// При вызове функции с булевым значением, функция нам вернет это значение в строковом виде!
// console.log(booleanToString(true))


//Задача 4
// Создаем функцию, которая принимает  в параметр (a) массив , а в параметр (х) новое значение
function check(a, x) {
    // Используя метод includes на массиве (а) со значением параметра (х) мы проверяем создежится ли массиве -
    // предоставленное значение (х)
    return a.includes(x)
}

// console.log(check([66,101], 66))

//Задача 5
// Условие
// В параметр функции передается число от 0 до 9, нужно его вернуть в строковом варианте
// Пришло число 1 в консоль вывод "один"


// Создаем функцию которая принимает в себя число и возвращает еще число в строковом виде
// Используем условие SWITCH которым проходимся по числах от 0 до 9 и если условие совпадает то возвращаем с условия
// Строковой вид числа
function switchItUp(number) {
    switch (number) {
        case 1 :
            return 'One';
        case 2 :
            return 'Two';
        case 3 :
            return 'Three';
        case 4 :
            return 'Four';
        case 5 :
            return 'Five';
        case 6 :
            return 'Six';
        case 7 :
            return 'Seven';
        case 8 :
            return 'Eight';
        case 9 :
            return 'Nine';
        case 0 :
            return 'Zero';
    }
}

// console.log(switchItUp(1))

// One


//Задача 6
// Условие
// Нужно написать функцию которая принимает в себя два логичиских аргумента
// Цель функции это вернуть true или false при установке будильника, это зависит от того, работаю ли я и нахожусь
// ли в отпуске

/*
* setAlarm(true, true) -> false // работаю и в отпуске
* setAlarm(false, true) -> false // безработный, но в отпуске
* setAlarm(false, false) -> false // безработный, но не в отпуске
* setAlarm(true, false) -> true // трудоустроен, но не в отпуске
* */

/*
    На основе введенных данных вернуть, true если вам нужно установить будильник,
    и false если вам не нужно устанавливать будильник.
    Из приведенного выше списка комбинаций мы видим, что единственный раз,
    когда вам нужно установить будильник, — это если вы работаете, а не в отпуске.
    Все остальное может вернуться false.
* */
function setAlarm(employed, vacation) {
    return employed && !vacation;
}

// console.log(setAlarm(true, false))

//Задача 7
// Условие
// Нужно написать функцию которая принимает массив строк в качестве аргумента и возвращает
// отсортированный массив, содержащий те же строки, отсортированный от самой короткой к сомой длиной


// Задаем функцию sortByLength, которая принимает массив строк в качестве аргумента
function sortByLength(array) {
    // Используем встроенный метод массивов sort, сравнивая длины строк
    // Функция сравнения (a, b) => a.length - b.length возвращает отрицательное число.
    //  Если длина строки a меньше длины строки b, то возвращается отрицательное число,
    //  что приводит к тому, что a будет идти перед b в отсортированном массиве.
    return array.sort((a, b) => a.length - b.length);
}

// Пример вызова функции с массивом строк ["Beg", "Life", "I", "To"]
// console.log(sortByLength(["Beg", "Life", "I", "To"]));
// Результат: [ 'I', 'To', 'Beg', 'Life' ]


//Задача 8
// Условие
// Каждый день аренды автомобиля стоит 40 долларов.
// Если вы арендуете автомобиль на 7 и более дней, вы получите скидку 50 долларов США.
// Альтернативно, если вы арендуете автомобиль на 3 или более дней, вы получите скидку 20 долларов США.
//
// Напишите код, который выдает общую сумму за разные дни(d).
// Определение функции rentalCarConst, которая принимает количество дней (d) в качестве аргумента
function rentalCarConst(d) {
    // Константа, представляющая стоимость аренды автомобиля за один день
    const day = 40;

    // Условие: Если количество дней (d) больше или равно 3 и меньше 7, применяется скидка 20 долларов
    if (d >= 3 && d < 7) {
        // Возвращается стоимость аренды с учетом скидки 20 долларов
        return d * day - 20;
    }
    // Дополнительное условие: Если количество дней (d) больше или равно 7, применяется более большая скидка 50 долларов
    else if (d >= 7) {
        // Возвращается стоимость аренды с учетом более большой скидки 50 долларов
        return d * day - 50;
    }

    // Если ни одно из условий не выполняется, возвращается стандартная стоимость аренды без скидок
    return d * day;
}

// Пример вызова функции с аргументом 4 и вывод результата в консоль
// console.log(rentalCarConst(4));  // Результат: 140


//Задача 9
// Условие
//Напишите функцию, которая возвращает минимальное и максимальное число данного списка/массива.

const arr = [1, 2, 3, 4, 5];

// Определяем функцию minMax, которая принимает массив в качестве аргумента
function minMax(arr) {
    // Используем spread-оператор и методы Math.max и Math.min для нахождения максимального и минимального значения в массиве
    return [Math.max(...arr), Math.min(...arr)];
    //return [Math.max(...arr), Math.min(...arr)];
    // Возвращается массив, содержащий максимальное и минимальное значения из массива arr.
    // Это достигается с использованием spread-оператора (...)
    // для распаковки элементов массива в аргументы методов Math.max и Math.min.
}

// Вызываем функцию minMax с массивом arr и выводим результат в консоль
// console.log(minMax(arr)); // [ 5, 1 ]


//Задача 10
// Условие
// Напишите функцию, которая принимает список строк и возвращает каждую строку, перед которой стоит правильный номер.
// Нумерация начинается с 1. Формат n: string: . Обратите внимание на двоеточие и пробел между ними.
const number = function (array) {
    //Создаем пустой массив
    let test = [];
    //Проверяем ввходящий в функцию массив на длину, если длина равна 0
    if(array.length === 0) {
        // Возвращаем пустой массив
        return []
    } else {
        // Иначе, проходимся по всему массиву
        for(let i = 0; i < array.length; i++) {
            // И при каждой итерации добавляем индекс в массив с порядковым номером начиная с 1  и элименты массива под каждый номер
            test.push((i + 1) + ': ' + array[i]);
        }
    }
    return test
}

// console.log(number(['a', 'b', 'c'])) // [ '1: a', '2: b', '3: c' ]


//Задача 11
// Условие
// В этой игре герой движется слева направо. Игрок бросает кубик и дважды перемещает количество мест, указанное на кубике.
// Первый параметр — это стартовая позиция игрока слева.
// Второй параметр — это значение, которое игрок получил при броске кубика.
// Он должен переместить это значение дважды вправо..
function move (position, roll) {
    const test = roll * 2;
    if (position === 0) {
        return  test
    } else {
        return position + test
    }
}

console.log(move(2, 5)) // 12